// <auto-generated/>

#if DEPRECATED
#if NET8_0_OR_GREATER

#nullable enable annotations
#nullable enable warnings

namespace Doxense.Serialization.Json.Tests
{
	using Doxense.Serialization.Json;
	using static Doxense.Serialization.Json.JsonSerializerExtensions;

	/// <summary>Generated source code for JSON operations on application types</summary>
	[global::System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembers(global::System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.All)]
	[global::System.CodeDom.Compiler.GeneratedCode("CrystalJsonSourceGenerator", "0.1")]
	[global::System.Diagnostics.DebuggerNonUserCode()]
	public static partial class GeneratedSerializers
	{

		#region Person...

		/// <summary>JSON converter for type <see cref="Doxense.Serialization.Json.Tests.Person">Person</see></summary>
		public static PersonJsonConverter Person => m_cachedPerson ??= new();

		private static PersonJsonConverter? m_cachedPerson;

		/// <summary>Converts instances of type <see cref="T:Doxense.Serialization.Json.Tests.Person">Person</see> to and from JSON.</summary>
		public sealed class PersonJsonConverter : IJsonConverter<Person>
		{

			#region Serialization...

			/// <summary>Names of all serialized members for this type</summary>
			public static class PropertyNames
			{

				/// <summary>Serialized name of the <see cref="global::Doxense.Serialization.Json.Tests.Person.FirstName"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.Person"/> class</summary>
				public const string FirstName = "firstName";

				/// <summary>Serialized name of the <see cref="global::Doxense.Serialization.Json.Tests.Person.FamilyName"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.Person"/> class</summary>
				public const string FamilyName = "familyName";

				public static string[] GetAllNames() => new [] { PropertyNames.FirstName, PropertyNames.FamilyName };

			}

			/// <summary>Cached encoded names for all serialized members for this type</summary>
			public static class PropertyEncodedNames
			{

				/// <summary>Encoded name of the <see cref="global::Doxense.Serialization.Json.Tests.Person.FirstName"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.Person"/> class</summary>
				public static readonly JsonEncodedPropertyName FirstName = new(PropertyNames.FirstName);

				/// <summary>Encoded name of the <see cref="global::Doxense.Serialization.Json.Tests.Person.FamilyName"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.Person"/> class</summary>
				public static readonly JsonEncodedPropertyName FamilyName = new(PropertyNames.FamilyName);

			}

			/// <summary>Writes a JSON representation of an instance of type <see cref="global::Doxense.Serialization.Json.Tests.Person"/></summary>
			public void Serialize(CrystalJsonWriter writer, global::Doxense.Serialization.Json.Tests.Person? instance)
			{
				if (instance is null)
				{
					writer.WriteNull();
					return;
				}

				if (instance.GetType() != typeof(global::Doxense.Serialization.Json.Tests.Person))
				{
					CrystalJsonVisitor.VisitValue(instance, typeof(global::Doxense.Serialization.Json.Tests.Person), writer);
					return;
				}

				var state = writer.BeginObject();

				// string FirstName => "firstName"
				writer.WriteField(PropertyEncodedNames.FirstName, instance.FirstName);

				// string FamilyName => "familyName"
				writer.WriteField(PropertyEncodedNames.FamilyName, instance.FamilyName);

				writer.EndObject(state);
			}

			#endregion

			#region Packing...

			/// <summary>Converts an instance of <see cref="global::Doxense.Serialization.Json.Tests.Person"/> into the equivalent <see cref="JsonValue"/></summary>
			public JsonValue Pack(global::Doxense.Serialization.Json.Tests.Person? instance, CrystalJsonSettings? settings = default, ICrystalJsonTypeResolver? resolver = default)
			{
				if (instance is null)
				{
					return JsonNull.Null;
				}

				if (instance.GetType() != typeof(global::Doxense.Serialization.Json.Tests.Person))
				{
					return JsonValue.FromValue(instance);
				}

				var obj = new JsonObject(2);

				// "firstName" => string? FirstName, prop
				obj.AddIfNotNull(PropertyNames.FirstName, JsonString.Return(instance.FirstName));

				// "familyName" => string? FamilyName, prop
				obj.AddIfNotNull(PropertyNames.FamilyName, JsonString.Return(instance.FamilyName));

				return settings.IsReadOnly() ? CrystalJsonMarshall.FreezeTopLevel(obj) : obj;
			}

			#endregion

			#region Unpacking...

			/// <summary>Unsafe accessor for the <see cref="global::Doxense.Serialization.Json.Tests.Person.FirstName"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.Person"/> class</summary>
			/// <remarks><code>string FirstName { get; set; }</code></remarks>
			[global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Field, Name = "<FirstName>k__BackingField")]
			private static extern ref string? FirstNameAccessor(global::Doxense.Serialization.Json.Tests.Person instance);

			/// <summary>Unsafe accessor for the <see cref="global::Doxense.Serialization.Json.Tests.Person.FamilyName"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.Person"/> class</summary>
			/// <remarks><code>string FamilyName { get; set; }</code></remarks>
			[global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Field, Name = "<FamilyName>k__BackingField")]
			private static extern ref string? FamilyNameAccessor(global::Doxense.Serialization.Json.Tests.Person instance);

			/// <summary>Deserializes a <see cref="JsonValue"/> into an instance of type <see cref="global::Doxense.Serialization.Json.Tests.Person"/></summary>
			public global::Doxense.Serialization.Json.Tests.Person Unpack(JsonValue value, ICrystalJsonTypeResolver? resolver = default)
			{
				var obj = value.AsObject();
				var instance = global::System.Activator.CreateInstance<global::Doxense.Serialization.Json.Tests.Person>();

				foreach (var kv in obj)
				{
					switch (kv.Key)
					{
						case PropertyNames.FirstName: FirstNameAccessor(instance) = kv.Value.ToStringOrDefault(); break;
						case PropertyNames.FamilyName: FamilyNameAccessor(instance) = kv.Value.ToStringOrDefault(); break;
					}
				}

				return instance;
			}

			#endregion

			/// <summary>Returns a read-only JSON Proxy that wraps a <see cref="JsonValue"/> into a type-safe emulation of type <see cref="global::Doxense.Serialization.Json.Tests.Person"/></summary>
			/// <returns>An instance of <see cref="GeneratedSerializers.PersonReadOnly"/> that wraps <paramref name="value"/> and exposes all the original members of <see cref="global::Doxense.Serialization.Json.Tests.Person"/> as getter-only properties.</returns>

			/// <remarks>
			/// <para>The read-only view cannot modify the original JSON value but, unless <paramref name="value"/> is itself read-only, any changes to the original will be reflected in the view.</para>
			/// <para>How to use:<code>
			/// JsonValue json = JsonValue.Parse(/* JSON text */);
			/// var proxy = GeneratedSerializers.Person.AsReadOnly();
			/// var value = proxy.FirstName; // returns the value of the "firstName" field exposed as <see cref="string"/>
			/// proxy.FirstName = newValue; // ERROR: will not compile (there is no setter defined for this member)
			/// </code></para>
			/// </remarks>
			/// <seealso cref="ToMutable(JsonValue)">If you need a writable view</seealso>
			public GeneratedSerializers.PersonReadOnly AsReadOnly(JsonValue value) => GeneratedSerializers.PersonReadOnly.Create(value, this);

			/// <summary>Converts an instance of type <see cref="global::Doxense.Serialization.Json.Tests.Person"/> into a read-only type-safe JSON Proxy.</summary>
			/// <returns>An instance of <see cref="GeneratedSerializers.PersonReadOnly"/> that exposes all the original members of <see cref="global::Doxense.Serialization.Json.Tests.Person"/> as getter-only properties.</returns>

			/// <remarks>
			/// <para>How to use:<code>
			/// var instance = new Person() { FirstName = ..., ... };
			/// // ...
			/// var proxy = GeneratedSerializers.Person.AsReadOnly(instance);
			/// var value = proxy.FirstName;
			/// proxy.FirstName = /* ... */; // ERROR: will not compile (there is no setter defined for this member)
			/// </code></para>
			/// </remarks>
			public GeneratedSerializers.PersonReadOnly AsReadOnly(global::Doxense.Serialization.Json.Tests.Person? instance) => GeneratedSerializers.PersonReadOnly.Create(instance);

			/// <summary>Returns a writable JSON Proxy that wraps a <see cref="JsonValue"/> into a type-safe emulation of type <see cref="global::Doxense.Serialization.Json.Tests.Person"/></summary>
			/// <returns>An instance of <see cref="GeneratedSerializers.PersonMutable"/> that wraps <paramref name="value"/> and exposes all the original members of <see cref="global::Doxense.Serialization.Json.Tests.Person"/> as writable properties.</returns>

			/// <remarks>
			/// <para>If <paramref name="value"/> is read-only, a mutable copy will be created and used instead.</para>
			/// <para>If <paramref name="value"/> is mutable, then it will be modified in-place. You can call <see cref="JsonValue.ToMutable"/> if you need to make a copy in all cases.</para>
			/// <para>How to use:<code>
			/// JsonValue json = JsonValue.Parse(/* JSON text */);
			/// var proxy = GeneratedSerializers.Person.AsMutable();
			/// var value = proxy.FirstName; // returns the value of the "firstName" field exposed as <see cref="string"/>
			/// proxy.FirstName = newValue; // change the value of the "firstName" field
			/// </code></para>
			/// </remarks>
			/// <seealso cref="AsReadOnly(JsonValue)">If you need a read-only view</seealso>
			public GeneratedSerializers.PersonMutable ToMutable(JsonValue value) => GeneratedSerializers.PersonMutable.Create(value, converter: this);

			/// <summary>Converts an instance of type <see cref="global::Doxense.Serialization.Json.Tests.Person"/> into a read-only type-safe JSON Proxy.</summary>
			/// <returns>An instance of <see cref="GeneratedSerializers.PersonReadOnly"/> that exposes all the original members of <see cref="global::Doxense.Serialization.Json.Tests.Person"/> as writable properties.</returns>

			/// <remarks>
			/// <para>How to use:<code>
			/// var instance = new Person() { FirstName = ..., ... };
			/// // ...
			/// var proxy = GeneratedSerializers.Person.ToMutable(instance);
			/// var value = proxy.FirstName;
			/// proxy.FirstName = newValue;
			/// </code></para>
			/// </remarks>
			public GeneratedSerializers.PersonMutable ToMutable(global::Doxense.Serialization.Json.Tests.Person? instance) => GeneratedSerializers.PersonMutable.Create(instance);

		}

		/// <summary>Wraps a <see cref="JsonObject"/> into a read-only type-safe view that emulates the type <see cref="global::Doxense.Serialization.Json.Tests.Person"/></summary>
		/// <seealso cref="IJsonReadOnlyProxy{T}"/>
		public readonly record struct PersonReadOnly : IJsonReadOnlyProxy<global::Doxense.Serialization.Json.Tests.Person, PersonReadOnly, PersonMutable>
		{

			/// <summary>JSON Object that is wrapped</summary>
			private readonly JsonObject m_obj;

			public PersonReadOnly(JsonValue value) => m_obj = value.AsObject();

			#region Public Methods...

			/// <inheritdoc />
			public static PersonReadOnly Create(JsonValue value, IJsonConverter<Person>? converter = null) => new(value.AsObject());

			/// <inheritdoc />
			public static PersonReadOnly Create(global::Doxense.Serialization.Json.Tests.Person? value, CrystalJsonSettings? settings = null, ICrystalJsonTypeResolver? resolver = null) => new(GeneratedSerializers.Person.Pack(value, settings.AsReadOnly(), resolver));

			/// <inheritdoc />
			public static IJsonConverter<Person> Converter => GeneratedSerializers.Person;

			/// <inheritdoc />
			public global::Doxense.Serialization.Json.Tests.Person ToValue() => GeneratedSerializers.Person.Unpack(m_obj);

			/// <inheritdoc />
			public JsonValue ToJson() => m_obj;

			/// <inheritdoc />
			public PersonMutable ToMutable() => new(m_obj.Copy());

			/// <inheritdoc />
			public PersonReadOnly With(Action<PersonMutable> modifier)
			{
				var copy = m_obj.Copy();
				modifier(new(copy));
				return new(copy.Freeze());
			}

			void IJsonSerializable.JsonSerialize(CrystalJsonWriter writer) => m_obj.JsonSerialize(writer);

			JsonValue IJsonPackable.JsonPack(CrystalJsonSettings settings, ICrystalJsonTypeResolver resolver) => m_obj;

			#endregion

			#region Public Members...

			/// <inheritdoc cref="Person.FirstName" />
			public string? FirstName => m_obj.Get<string?>("firstName", null);

			/// <inheritdoc cref="Person.FamilyName" />
			public string? FamilyName => m_obj.Get<string?>("familyName", null);

			#endregion

		}

		/// <summary>Wraps a <see cref="JsonObject"/> into a writable type-safe view that emulates the type <see cref="global::Doxense.Serialization.Json.Tests.Person"/></summary>
		/// <seealso cref="IJsonWritableProxy{TValue}"/>
		public sealed record PersonMutable : JsonWritableProxyObjectBase, IJsonWritableProxy<global::Doxense.Serialization.Json.Tests.Person, PersonMutable, PersonReadOnly>
		{

			public PersonMutable(JsonValue value, IJsonProxyNode? parent = null, JsonEncodedPropertyName? name = null, int index = 0) : base(value, parent, name, index)
			{
			}

			#region Public Methods...

			/// <inheritdoc />
			public static PersonMutable Create(JsonValue value, IJsonProxyNode? parent = null, JsonEncodedPropertyName? name = null, int index = 0, IJsonConverter<Person>? converter = null) => new(value, parent, name, index);

			/// <inheritdoc />
			public static PersonMutable Create(global::Doxense.Serialization.Json.Tests.Person? value, CrystalJsonSettings? settings = null, ICrystalJsonTypeResolver? resolver = null) => new(GeneratedSerializers.Person.Pack(value, settings.AsMutable(), resolver));

			/// <inheritdoc />
			public static IJsonConverter<Person> Converter => GeneratedSerializers.Person;

			/// <summary>Pack an instance of <see cref="global::Doxense.Serialization.Json.Tests.Person"/> into a mutable JSON proxy</summary>
			public static PersonMutable FromValue(global::Doxense.Serialization.Json.Tests.Person value)
			{
				global::Doxense.Diagnostics.Contracts.Contract.NotNull(value);
				return new(GeneratedSerializers.Person.Pack(value, CrystalJsonSettings.Json));
			}

			/// <inheritdoc />
			public global::Doxense.Serialization.Json.Tests.Person ToValue() => GeneratedSerializers.Person.Unpack(m_obj);

			/// <inheritdoc />
			public PersonReadOnly ToReadOnly() => new (m_obj.ToReadOnly());

			#endregion

			#region Public Members...

			/// <inheritdoc cref="Person.FirstName" />
			public string? FirstName
			{
				get => m_obj["firstName"].ToStringOrDefault(null);
				set => m_obj["firstName"] = JsonString.Return(value);
			}

			/// <inheritdoc cref="Person.FamilyName" />
			public string? FamilyName
			{
				get => m_obj["familyName"].ToStringOrDefault(null);
				set => m_obj["familyName"] = JsonString.Return(value);
			}

			#endregion

		}

		#endregion

		#region MyAwesomeUser...

		/// <summary>JSON converter for type <see cref="Doxense.Serialization.Json.Tests.MyAwesomeUser">MyAwesomeUser</see></summary>
		public static MyAwesomeUserJsonConverter MyAwesomeUser => m_cachedMyAwesomeUser ??= new();

		private static MyAwesomeUserJsonConverter? m_cachedMyAwesomeUser;

		/// <summary>Converts instances of type <see cref="T:Doxense.Serialization.Json.Tests.MyAwesomeUser">MyAwesomeUser</see> to and from JSON.</summary>
		public sealed class MyAwesomeUserJsonConverter : IJsonConverter<MyAwesomeUser>
		{

			#region Serialization...

			/// <summary>Names of all serialized members for this type</summary>
			public static class PropertyNames
			{

				/// <summary>Serialized name of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser.Id"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser"/> class</summary>
				public const string Id = "id";

				/// <summary>Serialized name of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser.DisplayName"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser"/> class</summary>
				public const string DisplayName = "displayName";

				/// <summary>Serialized name of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser.Email"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser"/> class</summary>
				public const string Email = "email";

				/// <summary>Serialized name of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser.Type"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser"/> class</summary>
				public const string Type = "type";

				/// <summary>Serialized name of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser.Roles"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser"/> class</summary>
				public const string Roles = "roles";

				/// <summary>Serialized name of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser.Metadata"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser"/> class</summary>
				public const string Metadata = "metadata";

				/// <summary>Serialized name of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser.Items"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser"/> class</summary>
				public const string Items = "items";

				/// <summary>Serialized name of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser.Devices"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser"/> class</summary>
				public const string Devices = "devices";

				/// <summary>Serialized name of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser.Extras"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser"/> class</summary>
				public const string Extras = "extras";

				public static string[] GetAllNames() => new [] { PropertyNames.Id, PropertyNames.DisplayName, PropertyNames.Email, PropertyNames.Type, PropertyNames.Roles, PropertyNames.Metadata, PropertyNames.Items, PropertyNames.Devices, PropertyNames.Extras };

			}

			/// <summary>Cached encoded names for all serialized members for this type</summary>
			public static class PropertyEncodedNames
			{

				/// <summary>Encoded name of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser.Id"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser"/> class</summary>
				public static readonly JsonEncodedPropertyName Id = new(PropertyNames.Id);

				/// <summary>Encoded name of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser.DisplayName"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser"/> class</summary>
				public static readonly JsonEncodedPropertyName DisplayName = new(PropertyNames.DisplayName);

				/// <summary>Encoded name of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser.Email"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser"/> class</summary>
				public static readonly JsonEncodedPropertyName Email = new(PropertyNames.Email);

				/// <summary>Encoded name of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser.Type"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser"/> class</summary>
				public static readonly JsonEncodedPropertyName Type = new(PropertyNames.Type);

				/// <summary>Encoded name of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser.Roles"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser"/> class</summary>
				public static readonly JsonEncodedPropertyName Roles = new(PropertyNames.Roles);

				/// <summary>Encoded name of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser.Metadata"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser"/> class</summary>
				public static readonly JsonEncodedPropertyName Metadata = new(PropertyNames.Metadata);

				/// <summary>Encoded name of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser.Items"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser"/> class</summary>
				public static readonly JsonEncodedPropertyName Items = new(PropertyNames.Items);

				/// <summary>Encoded name of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser.Devices"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser"/> class</summary>
				public static readonly JsonEncodedPropertyName Devices = new(PropertyNames.Devices);

				/// <summary>Encoded name of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser.Extras"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser"/> class</summary>
				public static readonly JsonEncodedPropertyName Extras = new(PropertyNames.Extras);

			}

			/// <summary>Writes a JSON representation of an instance of type <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser"/></summary>
			public void Serialize(CrystalJsonWriter writer, global::Doxense.Serialization.Json.Tests.MyAwesomeUser? instance)
			{
				if (instance is null)
				{
					writer.WriteNull();
					return;
				}

				var state = writer.BeginObject();

				// string Id => "id"
				writer.WriteField(PropertyEncodedNames.Id, instance.Id);

				// string DisplayName => "displayName"
				writer.WriteField(PropertyEncodedNames.DisplayName, instance.DisplayName);

				// string Email => "email"
				writer.WriteField(PropertyEncodedNames.Email, instance.Email);

				// int Type => "type"
				writer.WriteField(PropertyEncodedNames.Type, instance.Type);

				// string[] Roles => "roles"
				writer.WriteFieldArray(PropertyEncodedNames.Roles, instance.Roles);

				// MyAwesomeMetadata Metadata => "metadata"
				writer.WriteField(PropertyEncodedNames.Metadata, instance.Metadata, GeneratedSerializers.MyAwesomeMetadata);

				// List<MyAwesomeStruct> Items => "items"
				writer.WriteFieldArray(PropertyEncodedNames.Items, instance.Items, GeneratedSerializers.MyAwesomeStruct);

				// Dictionary<string, MyAwesomeDevice> Devices => "devices"
				writer.WriteFieldDictionary(PropertyEncodedNames.Devices, instance.Devices, GeneratedSerializers.MyAwesomeDevice);

				// JsonObject Extras => "extras"
				writer.WriteField(PropertyEncodedNames.Extras, instance.Extras);

				writer.EndObject(state);
			}

			#endregion

			#region Packing...

			/// <summary>Converts an instance of <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser"/> into the equivalent <see cref="JsonValue"/></summary>
			public JsonValue Pack(global::Doxense.Serialization.Json.Tests.MyAwesomeUser? instance, CrystalJsonSettings? settings = default, ICrystalJsonTypeResolver? resolver = default)
			{
				if (instance is null)
				{
					return JsonNull.Null;
				}

				var obj = new JsonObject(9);

				// "id" => string Id, KEY, prop, required, initOnly
				obj.Add(PropertyNames.Id, JsonString.Return(instance.Id));

				// "displayName" => string DisplayName, prop, required, initOnly
				obj.Add(PropertyNames.DisplayName, JsonString.Return(instance.DisplayName));

				// "email" => string Email, prop, required, initOnly
				obj.Add(PropertyNames.Email, JsonString.Return(instance.Email));

				// "type" => int Type, prop, hasDefault, initOnly
				obj.Add(PropertyNames.Type, JsonNumber.Return(instance.Type));

				// "roles" => string[]? Roles, prop, initOnly
				obj.AddIfNotNull(PropertyNames.Roles, JsonPackArray(instance.Roles, settings, resolver));

				// "metadata" => MyAwesomeMetadata Metadata, prop, required, initOnly
				obj.Add(PropertyNames.Metadata, GeneratedSerializers.MyAwesomeMetadata.Pack(instance.Metadata, settings, resolver));

				// "items" => List<MyAwesomeStruct>? Items, prop, required, initOnly
				obj.AddIfNotNull(PropertyNames.Items, GeneratedSerializers.MyAwesomeStruct.JsonPackList(instance.Items, settings, resolver));

				// "devices" => Dictionary<string, MyAwesomeDevice>? Devices, prop, initOnly
				obj.AddIfNotNull(PropertyNames.Devices, GeneratedSerializers.MyAwesomeDevice.JsonPackObject(instance.Devices, settings, resolver));

				// "extras" => JsonObject? Extras, prop, initOnly
				obj.AddIfNotNull(PropertyNames.Extras, settings.IsReadOnly() ? instance.Extras?.ToReadOnly() : instance.Extras);

				return settings.IsReadOnly() ? CrystalJsonMarshall.FreezeTopLevel(obj) : obj;
			}

			#endregion

			#region Unpacking...

			/// <summary>Unsafe accessor for the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser.Id"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser"/> class</summary>
			/// <remarks><code>string Id { get; init; }</code></remarks>
			[global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Field, Name = "<Id>k__BackingField")]
			private static extern ref string IdAccessor(global::Doxense.Serialization.Json.Tests.MyAwesomeUser instance);

			/// <summary>Unsafe accessor for the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser.DisplayName"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser"/> class</summary>
			/// <remarks><code>string DisplayName { get; init; }</code></remarks>
			[global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Field, Name = "<DisplayName>k__BackingField")]
			private static extern ref string DisplayNameAccessor(global::Doxense.Serialization.Json.Tests.MyAwesomeUser instance);

			/// <summary>Unsafe accessor for the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser.Email"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser"/> class</summary>
			/// <remarks><code>string Email { get; init; }</code></remarks>
			[global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Field, Name = "<Email>k__BackingField")]
			private static extern ref string EmailAccessor(global::Doxense.Serialization.Json.Tests.MyAwesomeUser instance);

			/// <summary>Unsafe accessor for the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser.Type"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser"/> class</summary>
			/// <remarks><code>int Type { get; init; }</code></remarks>
			[global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Field, Name = "<Type>k__BackingField")]
			private static extern ref int TypeAccessor(global::Doxense.Serialization.Json.Tests.MyAwesomeUser instance);

			/// <summary>Unsafe accessor for the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser.Roles"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser"/> class</summary>
			/// <remarks><code>string[] Roles { get; init; }</code></remarks>
			[global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Field, Name = "<Roles>k__BackingField")]
			private static extern ref string[]? RolesAccessor(global::Doxense.Serialization.Json.Tests.MyAwesomeUser instance);

			/// <summary>Unsafe accessor for the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser.Metadata"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser"/> class</summary>
			/// <remarks><code>MyAwesomeMetadata Metadata { get; init; }</code></remarks>
			[global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Field, Name = "<Metadata>k__BackingField")]
			private static extern ref global::Doxense.Serialization.Json.Tests.MyAwesomeMetadata MetadataAccessor(global::Doxense.Serialization.Json.Tests.MyAwesomeUser instance);

			/// <summary>Unsafe accessor for the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser.Items"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser"/> class</summary>
			/// <remarks><code>List&lt;MyAwesomeStruct&gt; Items { get; init; }</code></remarks>
			[global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Field, Name = "<Items>k__BackingField")]
			private static extern ref global::System.Collections.Generic.List<global::Doxense.Serialization.Json.Tests.MyAwesomeStruct>? ItemsAccessor(global::Doxense.Serialization.Json.Tests.MyAwesomeUser instance);

			/// <summary>Unsafe accessor for the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser.Devices"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser"/> class</summary>
			/// <remarks><code>Dictionary&lt;string, MyAwesomeDevice&gt; Devices { get; init; }</code></remarks>
			[global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Field, Name = "<Devices>k__BackingField")]
			private static extern ref global::System.Collections.Generic.Dictionary<string, global::Doxense.Serialization.Json.Tests.MyAwesomeDevice>? DevicesAccessor(global::Doxense.Serialization.Json.Tests.MyAwesomeUser instance);

			/// <summary>Unsafe accessor for the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser.Extras"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser"/> class</summary>
			/// <remarks><code>JsonObject Extras { get; init; }</code></remarks>
			[global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Field, Name = "<Extras>k__BackingField")]
			private static extern ref JsonObject? ExtrasAccessor(global::Doxense.Serialization.Json.Tests.MyAwesomeUser instance);

			/// <summary>Deserializes a <see cref="JsonValue"/> into an instance of type <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser"/></summary>
			public global::Doxense.Serialization.Json.Tests.MyAwesomeUser Unpack(JsonValue value, ICrystalJsonTypeResolver? resolver = default)
			{
				var obj = value.AsObject();
				var instance = global::System.Activator.CreateInstance<global::Doxense.Serialization.Json.Tests.MyAwesomeUser>();

				foreach (var kv in obj)
				{
					switch (kv.Key)
					{
						case PropertyNames.Id: IdAccessor(instance) = kv.Value.RequiredField("Id").ToString(); break;
						case PropertyNames.DisplayName: DisplayNameAccessor(instance) = kv.Value.RequiredField("DisplayName").ToString(); break;
						case PropertyNames.Email: EmailAccessor(instance) = kv.Value.RequiredField("Email").ToString(); break;
						case PropertyNames.Type: TypeAccessor(instance) = kv.Value.ToInt32(777); break;
						case PropertyNames.Roles: RolesAccessor(instance) = /* array_nullable */ kv.Value.AsArrayOrDefault()?.ToArray<string>(null, resolver)!; break;
						case PropertyNames.Metadata: MetadataAccessor(instance) = GeneratedSerializers.MyAwesomeMetadata.UnpackRequired(kv.Value, resolver: resolver, fieldName: "Metadata"); break;
						case PropertyNames.Items: ItemsAccessor(instance) = /* list_required */ GeneratedSerializers.MyAwesomeStruct.JsonDeserializeListRequired(kv.Value, resolver: resolver, fieldName: "Items"); break;
						case PropertyNames.Devices: DevicesAccessor(instance) = GeneratedSerializers.MyAwesomeDevice.JsonDeserializeDictionary(kv.Value, resolver: resolver)!; break;
						case PropertyNames.Extras: ExtrasAccessor(instance) = kv.Value.AsObjectOrDefault(); break;
					}
				}

				return instance;
			}

			#endregion

			/// <summary>Returns a read-only JSON Proxy that wraps a <see cref="JsonValue"/> into a type-safe emulation of type <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser"/></summary>
			/// <returns>An instance of <see cref="GeneratedSerializers.MyAwesomeUserReadOnly"/> that wraps <paramref name="value"/> and exposes all the original members of <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser"/> as getter-only properties.</returns>

			/// <remarks>
			/// <para>The read-only view cannot modify the original JSON value but, unless <paramref name="value"/> is itself read-only, any changes to the original will be reflected in the view.</para>
			/// <para>How to use:<code>
			/// JsonValue json = JsonValue.Parse(/* JSON text */);
			/// var proxy = GeneratedSerializers.MyAwesomeUser.AsReadOnly();
			/// var value = proxy.Id; // returns the value of the "id" field exposed as <see cref="string"/>
			/// proxy.Id = newValue; // ERROR: will not compile (there is no setter defined for this member)
			/// </code></para>
			/// </remarks>
			/// <seealso cref="ToMutable(JsonValue)">If you need a writable view</seealso>
			public GeneratedSerializers.MyAwesomeUserReadOnly AsReadOnly(JsonValue value) => GeneratedSerializers.MyAwesomeUserReadOnly.Create(value, this);

			/// <summary>Converts an instance of type <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser"/> into a read-only type-safe JSON Proxy.</summary>
			/// <returns>An instance of <see cref="GeneratedSerializers.MyAwesomeUserReadOnly"/> that exposes all the original members of <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser"/> as getter-only properties.</returns>

			/// <remarks>
			/// <para>How to use:<code>
			/// var instance = new MyAwesomeUser() { Id = ..., ... };
			/// // ...
			/// var proxy = GeneratedSerializers.MyAwesomeUser.AsReadOnly(instance);
			/// var value = proxy.Id;
			/// proxy.Id = /* ... */; // ERROR: will not compile (there is no setter defined for this member)
			/// </code></para>
			/// </remarks>
			public GeneratedSerializers.MyAwesomeUserReadOnly AsReadOnly(global::Doxense.Serialization.Json.Tests.MyAwesomeUser? instance) => GeneratedSerializers.MyAwesomeUserReadOnly.Create(instance);

			/// <summary>Returns a writable JSON Proxy that wraps a <see cref="JsonValue"/> into a type-safe emulation of type <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser"/></summary>
			/// <returns>An instance of <see cref="GeneratedSerializers.MyAwesomeUserMutable"/> that wraps <paramref name="value"/> and exposes all the original members of <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser"/> as writable properties.</returns>

			/// <remarks>
			/// <para>If <paramref name="value"/> is read-only, a mutable copy will be created and used instead.</para>
			/// <para>If <paramref name="value"/> is mutable, then it will be modified in-place. You can call <see cref="JsonValue.ToMutable"/> if you need to make a copy in all cases.</para>
			/// <para>How to use:<code>
			/// JsonValue json = JsonValue.Parse(/* JSON text */);
			/// var proxy = GeneratedSerializers.MyAwesomeUser.AsMutable();
			/// var value = proxy.Id; // returns the value of the "id" field exposed as <see cref="string"/>
			/// proxy.Id = newValue; // change the value of the "id" field
			/// </code></para>
			/// </remarks>
			/// <seealso cref="AsReadOnly(JsonValue)">If you need a read-only view</seealso>
			public GeneratedSerializers.MyAwesomeUserMutable ToMutable(JsonValue value) => GeneratedSerializers.MyAwesomeUserMutable.Create(value, converter: this);

			/// <summary>Converts an instance of type <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser"/> into a read-only type-safe JSON Proxy.</summary>
			/// <returns>An instance of <see cref="GeneratedSerializers.MyAwesomeUserReadOnly"/> that exposes all the original members of <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser"/> as writable properties.</returns>

			/// <remarks>
			/// <para>How to use:<code>
			/// var instance = new MyAwesomeUser() { Id = ..., ... };
			/// // ...
			/// var proxy = GeneratedSerializers.MyAwesomeUser.ToMutable(instance);
			/// var value = proxy.Id;
			/// proxy.Id = newValue;
			/// </code></para>
			/// </remarks>
			public GeneratedSerializers.MyAwesomeUserMutable ToMutable(global::Doxense.Serialization.Json.Tests.MyAwesomeUser? instance) => GeneratedSerializers.MyAwesomeUserMutable.Create(instance);

		}

		/// <summary>Wraps a <see cref="JsonObject"/> into a read-only type-safe view that emulates the type <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser"/></summary>
		/// <seealso cref="IJsonReadOnlyProxy{T}"/>
		public readonly record struct MyAwesomeUserReadOnly : IJsonReadOnlyProxy<global::Doxense.Serialization.Json.Tests.MyAwesomeUser, MyAwesomeUserReadOnly, MyAwesomeUserMutable>
		{

			/// <summary>JSON Object that is wrapped</summary>
			private readonly JsonObject m_obj;

			public MyAwesomeUserReadOnly(JsonValue value) => m_obj = value.AsObject();

			#region Public Methods...

			/// <inheritdoc />
			public static MyAwesomeUserReadOnly Create(JsonValue value, IJsonConverter<MyAwesomeUser>? converter = null) => new(value.AsObject());

			/// <inheritdoc />
			public static MyAwesomeUserReadOnly Create(global::Doxense.Serialization.Json.Tests.MyAwesomeUser? value, CrystalJsonSettings? settings = null, ICrystalJsonTypeResolver? resolver = null) => new(GeneratedSerializers.MyAwesomeUser.Pack(value, settings.AsReadOnly(), resolver));

			/// <inheritdoc />
			public static IJsonConverter<MyAwesomeUser> Converter => GeneratedSerializers.MyAwesomeUser;

			/// <inheritdoc />
			public global::Doxense.Serialization.Json.Tests.MyAwesomeUser ToValue() => GeneratedSerializers.MyAwesomeUser.Unpack(m_obj);

			/// <inheritdoc />
			public JsonValue ToJson() => m_obj;

			/// <inheritdoc />
			public MyAwesomeUserMutable ToMutable() => new(m_obj.Copy());

			/// <inheritdoc />
			public MyAwesomeUserReadOnly With(Action<MyAwesomeUserMutable> modifier)
			{
				var copy = m_obj.Copy();
				modifier(new(copy));
				return new(copy.Freeze());
			}

			void IJsonSerializable.JsonSerialize(CrystalJsonWriter writer) => m_obj.JsonSerialize(writer);

			JsonValue IJsonPackable.JsonPack(CrystalJsonSettings settings, ICrystalJsonTypeResolver resolver) => m_obj;

			#endregion

			#region Public Members...

			/// <inheritdoc cref="MyAwesomeUser.Id" />
			public string Id => m_obj.Get<string>("id");

			/// <inheritdoc cref="MyAwesomeUser.DisplayName" />
			public string DisplayName => m_obj.Get<string>("displayName");

			/// <inheritdoc cref="MyAwesomeUser.Email" />
			public string Email => m_obj.Get<string>("email");

			/// <inheritdoc cref="MyAwesomeUser.Type" />
			public int Type => m_obj.Get<int>("type", 777);

			/// <inheritdoc cref="MyAwesomeUser.Roles" />
			public JsonReadOnlyProxyArray<string> Roles => new(m_obj.GetArrayOrDefault("roles"));

			/// <inheritdoc cref="MyAwesomeUser.Metadata" />
			public GeneratedSerializers.MyAwesomeMetadataReadOnly Metadata => new(m_obj.GetObject("metadata"));

			/// <inheritdoc cref="MyAwesomeUser.Items" />
			public JsonReadOnlyProxyArray<global::Doxense.Serialization.Json.Tests.MyAwesomeStruct, GeneratedSerializers.MyAwesomeStructReadOnly> Items => new(m_obj.GetArrayOrDefault("items"));

			/// <inheritdoc cref="MyAwesomeUser.Devices" />
			public JsonReadOnlyProxyDictionary<global::Doxense.Serialization.Json.Tests.MyAwesomeDevice, GeneratedSerializers.MyAwesomeDeviceReadOnly> Devices => new(m_obj.GetObjectOrDefault("devices"));

			/// <inheritdoc cref="MyAwesomeUser.Extras" />
			public JsonObject? Extras => m_obj.GetObjectOrDefault("extras");

			#endregion

		}

		/// <summary>Wraps a <see cref="JsonObject"/> into a writable type-safe view that emulates the type <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser"/></summary>
		/// <seealso cref="IJsonWritableProxy{TValue}"/>
		public sealed record MyAwesomeUserMutable : JsonWritableProxyObjectBase, IJsonWritableProxy<global::Doxense.Serialization.Json.Tests.MyAwesomeUser, MyAwesomeUserMutable, MyAwesomeUserReadOnly>
		{

			public MyAwesomeUserMutable(JsonValue value, IJsonProxyNode? parent = null, JsonEncodedPropertyName? name = null, int index = 0) : base(value, parent, name, index)
			{
			}

			#region Public Methods...

			/// <inheritdoc />
			public static MyAwesomeUserMutable Create(JsonValue value, IJsonProxyNode? parent = null, JsonEncodedPropertyName? name = null, int index = 0, IJsonConverter<MyAwesomeUser>? converter = null) => new(value, parent, name, index);

			/// <inheritdoc />
			public static MyAwesomeUserMutable Create(global::Doxense.Serialization.Json.Tests.MyAwesomeUser? value, CrystalJsonSettings? settings = null, ICrystalJsonTypeResolver? resolver = null) => new(GeneratedSerializers.MyAwesomeUser.Pack(value, settings.AsMutable(), resolver));

			/// <inheritdoc />
			public static IJsonConverter<MyAwesomeUser> Converter => GeneratedSerializers.MyAwesomeUser;

			/// <summary>Pack an instance of <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeUser"/> into a mutable JSON proxy</summary>
			public static MyAwesomeUserMutable FromValue(global::Doxense.Serialization.Json.Tests.MyAwesomeUser value)
			{
				global::Doxense.Diagnostics.Contracts.Contract.NotNull(value);
				return new(GeneratedSerializers.MyAwesomeUser.Pack(value, CrystalJsonSettings.Json));
			}

			/// <inheritdoc />
			public global::Doxense.Serialization.Json.Tests.MyAwesomeUser ToValue() => GeneratedSerializers.MyAwesomeUser.Unpack(m_obj);

			/// <inheritdoc />
			public MyAwesomeUserReadOnly ToReadOnly() => new (m_obj.ToReadOnly());

			#endregion

			#region Public Members...

			/// <inheritdoc cref="MyAwesomeUser.Id" />
			public string Id
			{
				get => m_obj.GetValue("id").ToString();
				set => m_obj["id"] = JsonString.Return(value);
			}

			/// <inheritdoc cref="MyAwesomeUser.DisplayName" />
			public string DisplayName
			{
				get => m_obj.GetValue("displayName").ToString();
				set => m_obj["displayName"] = JsonString.Return(value);
			}

			/// <inheritdoc cref="MyAwesomeUser.Email" />
			public string Email
			{
				get => m_obj.GetValue("email").ToString();
				set => m_obj["email"] = JsonString.Return(value);
			}

			/// <inheritdoc cref="MyAwesomeUser.Type" />
			public int Type
			{
				get => m_obj["type"].ToInt32(777);
				set => m_obj["type"] = JsonNumber.Return(value);
			}

			/// <inheritdoc cref="MyAwesomeUser.Roles" />
			public string[]? Roles
			{
				get => m_obj.Get<string[]?>("roles", null);
				set => m_obj.Set<string[]?>("roles", value);
			}

			/// <inheritdoc cref="MyAwesomeUser.Metadata" />
			public GeneratedSerializers.MyAwesomeMetadataMutable Metadata
			{
				get => new(m_obj.GetObject("metadata"), name: MyAwesomeUserJsonConverter.PropertyEncodedNames.Metadata);
				set => m_obj["metadata"] = value.ToJson();
			}

			/// <inheritdoc cref="MyAwesomeUser.Items" />
			public JsonWritableProxyArray<global::Doxense.Serialization.Json.Tests.MyAwesomeStruct, GeneratedSerializers.MyAwesomeStructMutable> Items
			{
				get => new(m_obj["items"], parent: this, name: MyAwesomeUserJsonConverter.PropertyEncodedNames.Items);
				set => m_obj["items"] = value.ToJson();
			}

			/// <inheritdoc cref="MyAwesomeUser.Devices" />
			public JsonWritableProxyDictionary<global::Doxense.Serialization.Json.Tests.MyAwesomeDevice, GeneratedSerializers.MyAwesomeDeviceMutable> Devices
			{
				get => new(m_obj["devices"], parent: this, name: MyAwesomeUserJsonConverter.PropertyEncodedNames.Devices);
				set => m_obj["devices"] = value.ToJson();
			}

			/// <inheritdoc cref="MyAwesomeUser.Extras" />
			public JsonObject? Extras
			{
				get => m_obj.GetObjectOrDefault("extras")?.ToMutable();
				set => m_obj["extras"] = value ?? JsonNull.Null;
			}

			#endregion

		}

		#endregion

		#region MyAwesomeMetadata...

		/// <summary>JSON converter for type <see cref="Doxense.Serialization.Json.Tests.MyAwesomeMetadata">MyAwesomeMetadata</see></summary>
		public static MyAwesomeMetadataJsonConverter MyAwesomeMetadata => m_cachedMyAwesomeMetadata ??= new();

		private static MyAwesomeMetadataJsonConverter? m_cachedMyAwesomeMetadata;

		/// <summary>Converts instances of type <see cref="T:Doxense.Serialization.Json.Tests.MyAwesomeMetadata">MyAwesomeMetadata</see> to and from JSON.</summary>
		public sealed class MyAwesomeMetadataJsonConverter : IJsonConverter<MyAwesomeMetadata>
		{

			#region Serialization...

			/// <summary>Names of all serialized members for this type</summary>
			public static class PropertyNames
			{

				/// <summary>Serialized name of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeMetadata.AccountCreated"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeMetadata"/> class</summary>
				public const string AccountCreated = "accountCreated";

				/// <summary>Serialized name of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeMetadata.AccountModified"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeMetadata"/> class</summary>
				public const string AccountModified = "accountModified";

				/// <summary>Serialized name of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeMetadata.AccountDisabled"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeMetadata"/> class</summary>
				public const string AccountDisabled = "accountDisabled";

				public static string[] GetAllNames() => new [] { PropertyNames.AccountCreated, PropertyNames.AccountModified, PropertyNames.AccountDisabled };

			}

			/// <summary>Cached encoded names for all serialized members for this type</summary>
			public static class PropertyEncodedNames
			{

				/// <summary>Encoded name of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeMetadata.AccountCreated"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeMetadata"/> class</summary>
				public static readonly JsonEncodedPropertyName AccountCreated = new(PropertyNames.AccountCreated);

				/// <summary>Encoded name of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeMetadata.AccountModified"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeMetadata"/> class</summary>
				public static readonly JsonEncodedPropertyName AccountModified = new(PropertyNames.AccountModified);

				/// <summary>Encoded name of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeMetadata.AccountDisabled"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeMetadata"/> class</summary>
				public static readonly JsonEncodedPropertyName AccountDisabled = new(PropertyNames.AccountDisabled);

			}

			/// <summary>Writes a JSON representation of an instance of type <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeMetadata"/></summary>
			public void Serialize(CrystalJsonWriter writer, global::Doxense.Serialization.Json.Tests.MyAwesomeMetadata? instance)
			{
				if (instance is null)
				{
					writer.WriteNull();
					return;
				}

				var state = writer.BeginObject();

				// DateTimeOffset AccountCreated => "accountCreated"
				writer.WriteField(PropertyEncodedNames.AccountCreated, instance.AccountCreated);

				// DateTimeOffset AccountModified => "accountModified"
				writer.WriteField(PropertyEncodedNames.AccountModified, instance.AccountModified);

				// DateTimeOffset? AccountDisabled => "accountDisabled"
				writer.WriteField(PropertyEncodedNames.AccountDisabled, instance.AccountDisabled);

				writer.EndObject(state);
			}

			#endregion

			#region Packing...

			/// <summary>Converts an instance of <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeMetadata"/> into the equivalent <see cref="JsonValue"/></summary>
			public JsonValue Pack(global::Doxense.Serialization.Json.Tests.MyAwesomeMetadata? instance, CrystalJsonSettings? settings = default, ICrystalJsonTypeResolver? resolver = default)
			{
				if (instance is null)
				{
					return JsonNull.Null;
				}

				var obj = new JsonObject(3);

				// "accountCreated" => DateTimeOffset AccountCreated, prop, initOnly
				obj.Add(PropertyNames.AccountCreated, JsonDateTime.Return(instance.AccountCreated));

				// "accountModified" => DateTimeOffset AccountModified, prop, initOnly
				obj.Add(PropertyNames.AccountModified, JsonDateTime.Return(instance.AccountModified));

				// "accountDisabled" => DateTimeOffset? AccountDisabled, prop, initOnly
				obj.AddIfNotNull(PropertyNames.AccountDisabled, JsonDateTime.Return(instance.AccountDisabled));

				return settings.IsReadOnly() ? CrystalJsonMarshall.FreezeTopLevel(obj) : obj;
			}

			#endregion

			#region Unpacking...

			/// <summary>Unsafe accessor for the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeMetadata.AccountCreated"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeMetadata"/> class</summary>
			/// <remarks><code>DateTimeOffset AccountCreated { get; init; }</code></remarks>
			[global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Field, Name = "<AccountCreated>k__BackingField")]
			private static extern ref global::System.DateTimeOffset AccountCreatedAccessor(global::Doxense.Serialization.Json.Tests.MyAwesomeMetadata instance);

			/// <summary>Unsafe accessor for the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeMetadata.AccountModified"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeMetadata"/> class</summary>
			/// <remarks><code>DateTimeOffset AccountModified { get; init; }</code></remarks>
			[global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Field, Name = "<AccountModified>k__BackingField")]
			private static extern ref global::System.DateTimeOffset AccountModifiedAccessor(global::Doxense.Serialization.Json.Tests.MyAwesomeMetadata instance);

			/// <summary>Unsafe accessor for the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeMetadata.AccountDisabled"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeMetadata"/> class</summary>
			/// <remarks><code>DateTimeOffset? AccountDisabled { get; init; }</code></remarks>
			[global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Field, Name = "<AccountDisabled>k__BackingField")]
			private static extern ref global::System.DateTimeOffset? AccountDisabledAccessor(global::Doxense.Serialization.Json.Tests.MyAwesomeMetadata instance);

			/// <summary>Deserializes a <see cref="JsonValue"/> into an instance of type <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeMetadata"/></summary>
			public global::Doxense.Serialization.Json.Tests.MyAwesomeMetadata Unpack(JsonValue value, ICrystalJsonTypeResolver? resolver = default)
			{
				var obj = value.AsObject();
				var instance = global::System.Activator.CreateInstance<global::Doxense.Serialization.Json.Tests.MyAwesomeMetadata>();

				foreach (var kv in obj)
				{
					switch (kv.Key)
					{
						case PropertyNames.AccountCreated: AccountCreatedAccessor(instance) = kv.Value.ToDateTimeOffset(); break;
						case PropertyNames.AccountModified: AccountModifiedAccessor(instance) = kv.Value.ToDateTimeOffset(); break;
						case PropertyNames.AccountDisabled: AccountDisabledAccessor(instance) = kv.Value.ToDateTimeOffsetOrDefault(); break;
					}
				}

				return instance;
			}

			#endregion

			/// <summary>Returns a read-only JSON Proxy that wraps a <see cref="JsonValue"/> into a type-safe emulation of type <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeMetadata"/></summary>
			/// <returns>An instance of <see cref="GeneratedSerializers.MyAwesomeMetadataReadOnly"/> that wraps <paramref name="value"/> and exposes all the original members of <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeMetadata"/> as getter-only properties.</returns>

			/// <remarks>
			/// <para>The read-only view cannot modify the original JSON value but, unless <paramref name="value"/> is itself read-only, any changes to the original will be reflected in the view.</para>
			/// <para>How to use:<code>
			/// JsonValue json = JsonValue.Parse(/* JSON text */);
			/// var proxy = GeneratedSerializers.MyAwesomeMetadata.AsReadOnly();
			/// var value = proxy.AccountCreated; // returns the value of the "accountCreated" field exposed as <see cref="global::System.DateTimeOffset"/>
			/// proxy.AccountCreated = newValue; // ERROR: will not compile (there is no setter defined for this member)
			/// </code></para>
			/// </remarks>
			/// <seealso cref="ToMutable(JsonValue)">If you need a writable view</seealso>
			public GeneratedSerializers.MyAwesomeMetadataReadOnly AsReadOnly(JsonValue value) => GeneratedSerializers.MyAwesomeMetadataReadOnly.Create(value, this);

			/// <summary>Converts an instance of type <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeMetadata"/> into a read-only type-safe JSON Proxy.</summary>
			/// <returns>An instance of <see cref="GeneratedSerializers.MyAwesomeMetadataReadOnly"/> that exposes all the original members of <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeMetadata"/> as getter-only properties.</returns>

			/// <remarks>
			/// <para>How to use:<code>
			/// var instance = new MyAwesomeMetadata() { AccountCreated = ..., ... };
			/// // ...
			/// var proxy = GeneratedSerializers.MyAwesomeMetadata.AsReadOnly(instance);
			/// var value = proxy.AccountCreated;
			/// proxy.AccountCreated = /* ... */; // ERROR: will not compile (there is no setter defined for this member)
			/// </code></para>
			/// </remarks>
			public GeneratedSerializers.MyAwesomeMetadataReadOnly AsReadOnly(global::Doxense.Serialization.Json.Tests.MyAwesomeMetadata? instance) => GeneratedSerializers.MyAwesomeMetadataReadOnly.Create(instance);

			/// <summary>Returns a writable JSON Proxy that wraps a <see cref="JsonValue"/> into a type-safe emulation of type <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeMetadata"/></summary>
			/// <returns>An instance of <see cref="GeneratedSerializers.MyAwesomeMetadataMutable"/> that wraps <paramref name="value"/> and exposes all the original members of <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeMetadata"/> as writable properties.</returns>

			/// <remarks>
			/// <para>If <paramref name="value"/> is read-only, a mutable copy will be created and used instead.</para>
			/// <para>If <paramref name="value"/> is mutable, then it will be modified in-place. You can call <see cref="JsonValue.ToMutable"/> if you need to make a copy in all cases.</para>
			/// <para>How to use:<code>
			/// JsonValue json = JsonValue.Parse(/* JSON text */);
			/// var proxy = GeneratedSerializers.MyAwesomeMetadata.AsMutable();
			/// var value = proxy.AccountCreated; // returns the value of the "accountCreated" field exposed as <see cref="global::System.DateTimeOffset"/>
			/// proxy.AccountCreated = newValue; // change the value of the "accountCreated" field
			/// </code></para>
			/// </remarks>
			/// <seealso cref="AsReadOnly(JsonValue)">If you need a read-only view</seealso>
			public GeneratedSerializers.MyAwesomeMetadataMutable ToMutable(JsonValue value) => GeneratedSerializers.MyAwesomeMetadataMutable.Create(value, converter: this);

			/// <summary>Converts an instance of type <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeMetadata"/> into a read-only type-safe JSON Proxy.</summary>
			/// <returns>An instance of <see cref="GeneratedSerializers.MyAwesomeMetadataReadOnly"/> that exposes all the original members of <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeMetadata"/> as writable properties.</returns>

			/// <remarks>
			/// <para>How to use:<code>
			/// var instance = new MyAwesomeMetadata() { AccountCreated = ..., ... };
			/// // ...
			/// var proxy = GeneratedSerializers.MyAwesomeMetadata.ToMutable(instance);
			/// var value = proxy.AccountCreated;
			/// proxy.AccountCreated = newValue;
			/// </code></para>
			/// </remarks>
			public GeneratedSerializers.MyAwesomeMetadataMutable ToMutable(global::Doxense.Serialization.Json.Tests.MyAwesomeMetadata? instance) => GeneratedSerializers.MyAwesomeMetadataMutable.Create(instance);

		}

		/// <summary>Wraps a <see cref="JsonObject"/> into a read-only type-safe view that emulates the type <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeMetadata"/></summary>
		/// <seealso cref="IJsonReadOnlyProxy{T}"/>
		public readonly record struct MyAwesomeMetadataReadOnly : IJsonReadOnlyProxy<global::Doxense.Serialization.Json.Tests.MyAwesomeMetadata, MyAwesomeMetadataReadOnly, MyAwesomeMetadataMutable>
		{

			/// <summary>JSON Object that is wrapped</summary>
			private readonly JsonObject m_obj;

			public MyAwesomeMetadataReadOnly(JsonValue value) => m_obj = value.AsObject();

			#region Public Methods...

			/// <inheritdoc />
			public static MyAwesomeMetadataReadOnly Create(JsonValue value, IJsonConverter<MyAwesomeMetadata>? converter = null) => new(value.AsObject());

			/// <inheritdoc />
			public static MyAwesomeMetadataReadOnly Create(global::Doxense.Serialization.Json.Tests.MyAwesomeMetadata? value, CrystalJsonSettings? settings = null, ICrystalJsonTypeResolver? resolver = null) => new(GeneratedSerializers.MyAwesomeMetadata.Pack(value, settings.AsReadOnly(), resolver));

			/// <inheritdoc />
			public static IJsonConverter<MyAwesomeMetadata> Converter => GeneratedSerializers.MyAwesomeMetadata;

			/// <inheritdoc />
			public global::Doxense.Serialization.Json.Tests.MyAwesomeMetadata ToValue() => GeneratedSerializers.MyAwesomeMetadata.Unpack(m_obj);

			/// <inheritdoc />
			public JsonValue ToJson() => m_obj;

			/// <inheritdoc />
			public MyAwesomeMetadataMutable ToMutable() => new(m_obj.Copy());

			/// <inheritdoc />
			public MyAwesomeMetadataReadOnly With(Action<MyAwesomeMetadataMutable> modifier)
			{
				var copy = m_obj.Copy();
				modifier(new(copy));
				return new(copy.Freeze());
			}

			void IJsonSerializable.JsonSerialize(CrystalJsonWriter writer) => m_obj.JsonSerialize(writer);

			JsonValue IJsonPackable.JsonPack(CrystalJsonSettings settings, ICrystalJsonTypeResolver resolver) => m_obj;

			#endregion

			#region Public Members...

			/// <inheritdoc cref="MyAwesomeMetadata.AccountCreated" />
			public global::System.DateTimeOffset AccountCreated => m_obj.Get<global::System.DateTimeOffset>("accountCreated", DateTimeOffset.MinValue);

			/// <inheritdoc cref="MyAwesomeMetadata.AccountModified" />
			public global::System.DateTimeOffset AccountModified => m_obj.Get<global::System.DateTimeOffset>("accountModified", DateTimeOffset.MinValue);

			/// <inheritdoc cref="MyAwesomeMetadata.AccountDisabled" />
			public global::System.DateTimeOffset? AccountDisabled => m_obj.Get<global::System.DateTimeOffset?>("accountDisabled", default!);

			#endregion

		}

		/// <summary>Wraps a <see cref="JsonObject"/> into a writable type-safe view that emulates the type <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeMetadata"/></summary>
		/// <seealso cref="IJsonWritableProxy{TValue}"/>
		public sealed record MyAwesomeMetadataMutable : JsonWritableProxyObjectBase, IJsonWritableProxy<global::Doxense.Serialization.Json.Tests.MyAwesomeMetadata, MyAwesomeMetadataMutable, MyAwesomeMetadataReadOnly>
		{

			public MyAwesomeMetadataMutable(JsonValue value, IJsonProxyNode? parent = null, JsonEncodedPropertyName? name = null, int index = 0) : base(value, parent, name, index)
			{
			}

			#region Public Methods...

			/// <inheritdoc />
			public static MyAwesomeMetadataMutable Create(JsonValue value, IJsonProxyNode? parent = null, JsonEncodedPropertyName? name = null, int index = 0, IJsonConverter<MyAwesomeMetadata>? converter = null) => new(value, parent, name, index);

			/// <inheritdoc />
			public static MyAwesomeMetadataMutable Create(global::Doxense.Serialization.Json.Tests.MyAwesomeMetadata? value, CrystalJsonSettings? settings = null, ICrystalJsonTypeResolver? resolver = null) => new(GeneratedSerializers.MyAwesomeMetadata.Pack(value, settings.AsMutable(), resolver));

			/// <inheritdoc />
			public static IJsonConverter<MyAwesomeMetadata> Converter => GeneratedSerializers.MyAwesomeMetadata;

			/// <summary>Pack an instance of <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeMetadata"/> into a mutable JSON proxy</summary>
			public static MyAwesomeMetadataMutable FromValue(global::Doxense.Serialization.Json.Tests.MyAwesomeMetadata value)
			{
				global::Doxense.Diagnostics.Contracts.Contract.NotNull(value);
				return new(GeneratedSerializers.MyAwesomeMetadata.Pack(value, CrystalJsonSettings.Json));
			}

			/// <inheritdoc />
			public global::Doxense.Serialization.Json.Tests.MyAwesomeMetadata ToValue() => GeneratedSerializers.MyAwesomeMetadata.Unpack(m_obj);

			/// <inheritdoc />
			public MyAwesomeMetadataReadOnly ToReadOnly() => new (m_obj.ToReadOnly());

			#endregion

			#region Public Members...

			/// <inheritdoc cref="MyAwesomeMetadata.AccountCreated" />
			public global::System.DateTimeOffset AccountCreated
			{
				get => m_obj.Get<global::System.DateTimeOffset>("accountCreated", DateTimeOffset.MinValue);
				set => m_obj["accountCreated"] = JsonDateTime.Return(value);
			}

			/// <inheritdoc cref="MyAwesomeMetadata.AccountModified" />
			public global::System.DateTimeOffset AccountModified
			{
				get => m_obj.Get<global::System.DateTimeOffset>("accountModified", DateTimeOffset.MinValue);
				set => m_obj["accountModified"] = JsonDateTime.Return(value);
			}

			/// <inheritdoc cref="MyAwesomeMetadata.AccountDisabled" />
			public global::System.DateTimeOffset? AccountDisabled
			{
				get => m_obj.Get<global::System.DateTimeOffset?>("accountDisabled", default!);
				set => m_obj["accountDisabled"] = JsonDateTime.Return(value);
			}

			#endregion

		}

		#endregion

		#region MyAwesomeStruct...

		/// <summary>JSON converter for type <see cref="Doxense.Serialization.Json.Tests.MyAwesomeStruct">MyAwesomeStruct</see></summary>
		public static MyAwesomeStructJsonConverter MyAwesomeStruct => m_cachedMyAwesomeStruct ??= new();

		private static MyAwesomeStructJsonConverter? m_cachedMyAwesomeStruct;

		/// <summary>Converts instances of type <see cref="T:Doxense.Serialization.Json.Tests.MyAwesomeStruct">MyAwesomeStruct</see> to and from JSON.</summary>
		public sealed class MyAwesomeStructJsonConverter : IJsonConverter<MyAwesomeStruct>
		{

			#region Serialization...

			/// <summary>Names of all serialized members for this type</summary>
			public static class PropertyNames
			{

				/// <summary>Serialized name of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeStruct.Id"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeStruct"/> struct</summary>
				public const string Id = "id";

				/// <summary>Serialized name of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeStruct.Level"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeStruct"/> struct</summary>
				public const string Level = "level";

				/// <summary>Serialized name of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeStruct.Path"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeStruct"/> struct</summary>
				public const string Path = "path";

				/// <summary>Serialized name of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeStruct.Paths"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeStruct"/> struct</summary>
				public const string Paths = "paths";

				/// <summary>Serialized name of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeStruct.MaybePath"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeStruct"/> struct</summary>
				public const string MaybePath = "maybePath";

				/// <summary>Serialized name of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeStruct.Disabled"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeStruct"/> struct</summary>
				public const string Disabled = "disabled";

				public static string[] GetAllNames() => new [] { PropertyNames.Id, PropertyNames.Level, PropertyNames.Path, PropertyNames.Paths, PropertyNames.MaybePath, PropertyNames.Disabled };

			}

			/// <summary>Cached encoded names for all serialized members for this type</summary>
			public static class PropertyEncodedNames
			{

				/// <summary>Encoded name of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeStruct.Id"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeStruct"/> struct</summary>
				public static readonly JsonEncodedPropertyName Id = new(PropertyNames.Id);

				/// <summary>Encoded name of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeStruct.Level"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeStruct"/> struct</summary>
				public static readonly JsonEncodedPropertyName Level = new(PropertyNames.Level);

				/// <summary>Encoded name of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeStruct.Path"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeStruct"/> struct</summary>
				public static readonly JsonEncodedPropertyName Path = new(PropertyNames.Path);

				/// <summary>Encoded name of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeStruct.Paths"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeStruct"/> struct</summary>
				public static readonly JsonEncodedPropertyName Paths = new(PropertyNames.Paths);

				/// <summary>Encoded name of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeStruct.MaybePath"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeStruct"/> struct</summary>
				public static readonly JsonEncodedPropertyName MaybePath = new(PropertyNames.MaybePath);

				/// <summary>Encoded name of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeStruct.Disabled"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeStruct"/> struct</summary>
				public static readonly JsonEncodedPropertyName Disabled = new(PropertyNames.Disabled);

			}

			/// <summary>Writes a JSON representation of an instance of type <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeStruct"/></summary>
			public void Serialize(CrystalJsonWriter writer, global::Doxense.Serialization.Json.Tests.MyAwesomeStruct instance)
			{
				var state = writer.BeginObject();

				// string Id => "id"
				writer.WriteField(PropertyEncodedNames.Id, instance.Id);

				// int Level => "level"
				writer.WriteField(PropertyEncodedNames.Level, instance.Level);

				// JsonPath Path => "path"
				writer.WriteFieldJsonSerializable(PropertyEncodedNames.Path, instance.Path);

				// JsonPath[] Paths => "paths"
				writer.WriteFieldJsonSerializableArray(PropertyEncodedNames.Paths, instance.Paths);

				// JsonPath? MaybePath => "maybePath"
				writer.WriteField(PropertyEncodedNames.MaybePath, instance.MaybePath);

				// bool? Disabled => "disabled"
				writer.WriteField(PropertyEncodedNames.Disabled, instance.Disabled);

				writer.EndObject(state);
			}

			#endregion

			#region Packing...

			/// <summary>Converts an instance of <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeStruct"/> into the equivalent <see cref="JsonValue"/></summary>
			public JsonValue Pack(global::Doxense.Serialization.Json.Tests.MyAwesomeStruct instance, CrystalJsonSettings? settings = default, ICrystalJsonTypeResolver? resolver = default)
			{
				var obj = new JsonObject(6);

				// "id" => string Id, KEY, prop, required, initOnly
				obj.Add(PropertyNames.Id, JsonString.Return(instance.Id));

				// "level" => int Level, prop, required, initOnly
				obj.Add(PropertyNames.Level, JsonNumber.Return(instance.Level));

				// "path" => JsonPath Path, prop, required, initOnly
				obj.Add(PropertyNames.Path, JsonValue.FromValue<JsonPath>(instance.Path));

				// "paths" => JsonPath[]? Paths, prop, initOnly
				obj.AddIfNotNull(PropertyNames.Paths, JsonPackArray(instance.Paths, settings, resolver));

				// "maybePath" => JsonPath? MaybePath, prop, initOnly
				obj.AddIfNotNull(PropertyNames.MaybePath, JsonValue.FromValue<global::Doxense.Serialization.Json.JsonPath?>(instance.MaybePath));

				// "disabled" => bool? Disabled, prop, initOnly
				obj.AddIfNotNull(PropertyNames.Disabled, JsonBoolean.Return(instance.Disabled));

				return settings.IsReadOnly() ? CrystalJsonMarshall.FreezeTopLevel(obj) : obj;
			}

			#endregion

			#region Unpacking...

			/// <summary>Unsafe accessor for the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeStruct.Id"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeStruct"/> struct</summary>
			/// <remarks><code>string Id { get; init; }</code></remarks>
			[global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Field, Name = "<Id>k__BackingField")]
			private static extern ref string IdAccessor(ref global::Doxense.Serialization.Json.Tests.MyAwesomeStruct instance);

			/// <summary>Unsafe accessor for the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeStruct.Level"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeStruct"/> struct</summary>
			/// <remarks><code>int Level { get; init; }</code></remarks>
			[global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Field, Name = "<Level>k__BackingField")]
			private static extern ref int LevelAccessor(ref global::Doxense.Serialization.Json.Tests.MyAwesomeStruct instance);

			/// <summary>Unsafe accessor for the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeStruct.Path"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeStruct"/> struct</summary>
			/// <remarks><code>JsonPath Path { get; init; }</code></remarks>
			[global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Field, Name = "<Path>k__BackingField")]
			private static extern ref JsonPath PathAccessor(ref global::Doxense.Serialization.Json.Tests.MyAwesomeStruct instance);

			/// <summary>Unsafe accessor for the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeStruct.Paths"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeStruct"/> struct</summary>
			/// <remarks><code>JsonPath[] Paths { get; init; }</code></remarks>
			[global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Field, Name = "<Paths>k__BackingField")]
			private static extern ref JsonPath[]? PathsAccessor(ref global::Doxense.Serialization.Json.Tests.MyAwesomeStruct instance);

			/// <summary>Unsafe accessor for the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeStruct.MaybePath"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeStruct"/> struct</summary>
			/// <remarks><code>JsonPath? MaybePath { get; init; }</code></remarks>
			[global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Field, Name = "<MaybePath>k__BackingField")]
			private static extern ref global::Doxense.Serialization.Json.JsonPath? MaybePathAccessor(ref global::Doxense.Serialization.Json.Tests.MyAwesomeStruct instance);

			/// <summary>Unsafe accessor for the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeStruct.Disabled"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeStruct"/> struct</summary>
			/// <remarks><code>bool? Disabled { get; init; }</code></remarks>
			[global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Field, Name = "<Disabled>k__BackingField")]
			private static extern ref bool? DisabledAccessor(ref global::Doxense.Serialization.Json.Tests.MyAwesomeStruct instance);

			/// <summary>Deserializes a <see cref="JsonValue"/> into an instance of type <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeStruct"/></summary>
			public global::Doxense.Serialization.Json.Tests.MyAwesomeStruct Unpack(JsonValue value, ICrystalJsonTypeResolver? resolver = default)
			{
				var obj = value.AsObject();
				var instance = global::System.Activator.CreateInstance<global::Doxense.Serialization.Json.Tests.MyAwesomeStruct>();

				foreach (var kv in obj)
				{
					switch (kv.Key)
					{
						case PropertyNames.Id: IdAccessor(ref instance) = kv.Value.RequiredField("Id").ToString(); break;
						case PropertyNames.Level: LevelAccessor(ref instance) = kv.Value.ToInt32(); break;
						case PropertyNames.Path: PathAccessor(ref instance) = /* required_deserializable */ UnpackRequired<JsonPath>(kv.Value, resolver: resolver, fieldName: "Path"); break;
						case PropertyNames.Paths: PathsAccessor(ref instance) = /* array_nullable */ kv.Value.AsArrayOrDefault()?.ToArray<JsonPath>(default, resolver)!; break;
						case PropertyNames.MaybePath: MaybePathAccessor(ref instance) = /* vt_nullable_deserializable */ UnpackNullable<JsonPath>(kv.Value, resolver: resolver); break;
						case PropertyNames.Disabled: DisabledAccessor(ref instance) = kv.Value.ToBooleanOrDefault(); break;
					}
				}

				return instance;
			}

			#endregion

			/// <summary>Returns a read-only JSON Proxy that wraps a <see cref="JsonValue"/> into a type-safe emulation of type <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeStruct"/></summary>
			/// <returns>An instance of <see cref="GeneratedSerializers.MyAwesomeStructReadOnly"/> that wraps <paramref name="value"/> and exposes all the original members of <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeStruct"/> as getter-only properties.</returns>

			/// <remarks>
			/// <para>The read-only view cannot modify the original JSON value but, unless <paramref name="value"/> is itself read-only, any changes to the original will be reflected in the view.</para>
			/// <para>How to use:<code>
			/// JsonValue json = JsonValue.Parse(/* JSON text */);
			/// var proxy = GeneratedSerializers.MyAwesomeStruct.AsReadOnly();
			/// var value = proxy.Id; // returns the value of the "id" field exposed as <see cref="string"/>
			/// proxy.Id = newValue; // ERROR: will not compile (there is no setter defined for this member)
			/// </code></para>
			/// </remarks>
			/// <seealso cref="ToMutable(JsonValue)">If you need a writable view</seealso>
			public GeneratedSerializers.MyAwesomeStructReadOnly AsReadOnly(JsonValue value) => GeneratedSerializers.MyAwesomeStructReadOnly.Create(value, this);

			/// <summary>Converts an instance of type <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeStruct"/> into a read-only type-safe JSON Proxy.</summary>
			/// <returns>An instance of <see cref="GeneratedSerializers.MyAwesomeStructReadOnly"/> that exposes all the original members of <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeStruct"/> as getter-only properties.</returns>

			/// <remarks>
			/// <para>How to use:<code>
			/// var instance = new MyAwesomeStruct() { Id = ..., ... };
			/// // ...
			/// var proxy = GeneratedSerializers.MyAwesomeStruct.AsReadOnly(instance);
			/// var value = proxy.Id;
			/// proxy.Id = /* ... */; // ERROR: will not compile (there is no setter defined for this member)
			/// </code></para>
			/// </remarks>
			public GeneratedSerializers.MyAwesomeStructReadOnly AsReadOnly(global::Doxense.Serialization.Json.Tests.MyAwesomeStruct instance) => GeneratedSerializers.MyAwesomeStructReadOnly.Create(instance);

			/// <summary>Returns a writable JSON Proxy that wraps a <see cref="JsonValue"/> into a type-safe emulation of type <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeStruct"/></summary>
			/// <returns>An instance of <see cref="GeneratedSerializers.MyAwesomeStructMutable"/> that wraps <paramref name="value"/> and exposes all the original members of <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeStruct"/> as writable properties.</returns>

			/// <remarks>
			/// <para>If <paramref name="value"/> is read-only, a mutable copy will be created and used instead.</para>
			/// <para>If <paramref name="value"/> is mutable, then it will be modified in-place. You can call <see cref="JsonValue.ToMutable"/> if you need to make a copy in all cases.</para>
			/// <para>How to use:<code>
			/// JsonValue json = JsonValue.Parse(/* JSON text */);
			/// var proxy = GeneratedSerializers.MyAwesomeStruct.AsMutable();
			/// var value = proxy.Id; // returns the value of the "id" field exposed as <see cref="string"/>
			/// proxy.Id = newValue; // change the value of the "id" field
			/// </code></para>
			/// </remarks>
			/// <seealso cref="AsReadOnly(JsonValue)">If you need a read-only view</seealso>
			public GeneratedSerializers.MyAwesomeStructMutable ToMutable(JsonValue value) => GeneratedSerializers.MyAwesomeStructMutable.Create(value, converter: this);

			/// <summary>Converts an instance of type <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeStruct"/> into a read-only type-safe JSON Proxy.</summary>
			/// <returns>An instance of <see cref="GeneratedSerializers.MyAwesomeStructReadOnly"/> that exposes all the original members of <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeStruct"/> as writable properties.</returns>

			/// <remarks>
			/// <para>How to use:<code>
			/// var instance = new MyAwesomeStruct() { Id = ..., ... };
			/// // ...
			/// var proxy = GeneratedSerializers.MyAwesomeStruct.ToMutable(instance);
			/// var value = proxy.Id;
			/// proxy.Id = newValue;
			/// </code></para>
			/// </remarks>
			public GeneratedSerializers.MyAwesomeStructMutable ToMutable(global::Doxense.Serialization.Json.Tests.MyAwesomeStruct instance) => GeneratedSerializers.MyAwesomeStructMutable.Create(instance);

		}

		/// <summary>Wraps a <see cref="JsonObject"/> into a read-only type-safe view that emulates the type <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeStruct"/></summary>
		/// <seealso cref="IJsonReadOnlyProxy{T}"/>
		public readonly record struct MyAwesomeStructReadOnly : IJsonReadOnlyProxy<global::Doxense.Serialization.Json.Tests.MyAwesomeStruct, MyAwesomeStructReadOnly, MyAwesomeStructMutable>
		{

			/// <summary>JSON Object that is wrapped</summary>
			private readonly JsonObject m_obj;

			public MyAwesomeStructReadOnly(JsonValue value) => m_obj = value.AsObject();

			#region Public Methods...

			/// <inheritdoc />
			public static MyAwesomeStructReadOnly Create(JsonValue value, IJsonConverter<MyAwesomeStruct>? converter = null) => new(value.AsObject());

			/// <inheritdoc />
			public static MyAwesomeStructReadOnly Create(global::Doxense.Serialization.Json.Tests.MyAwesomeStruct value, CrystalJsonSettings? settings = null, ICrystalJsonTypeResolver? resolver = null) => new(GeneratedSerializers.MyAwesomeStruct.Pack(value, settings.AsReadOnly(), resolver));

			/// <inheritdoc />
			public static IJsonConverter<MyAwesomeStruct> Converter => GeneratedSerializers.MyAwesomeStruct;

			/// <inheritdoc />
			public global::Doxense.Serialization.Json.Tests.MyAwesomeStruct ToValue() => GeneratedSerializers.MyAwesomeStruct.Unpack(m_obj);

			/// <inheritdoc />
			public JsonValue ToJson() => m_obj;

			/// <inheritdoc />
			public MyAwesomeStructMutable ToMutable() => new(m_obj.Copy());

			/// <inheritdoc />
			public MyAwesomeStructReadOnly With(Action<MyAwesomeStructMutable> modifier)
			{
				var copy = m_obj.Copy();
				modifier(new(copy));
				return new(copy.Freeze());
			}

			void IJsonSerializable.JsonSerialize(CrystalJsonWriter writer) => m_obj.JsonSerialize(writer);

			JsonValue IJsonPackable.JsonPack(CrystalJsonSettings settings, ICrystalJsonTypeResolver resolver) => m_obj;

			#endregion

			#region Public Members...

			/// <inheritdoc cref="MyAwesomeStruct.Id" />
			public string Id => m_obj.Get<string>("id");

			/// <inheritdoc cref="MyAwesomeStruct.Level" />
			public int Level => m_obj.Get<int>("level");

			/// <inheritdoc cref="MyAwesomeStruct.Path" />
			public JsonPath Path => m_obj.Get<JsonPath>("path");

			/// <inheritdoc cref="MyAwesomeStruct.Paths" />
			public JsonReadOnlyProxyArray<JsonPath> Paths => new(m_obj.GetArrayOrDefault("paths"));

			/// <inheritdoc cref="MyAwesomeStruct.MaybePath" />
			public global::Doxense.Serialization.Json.JsonPath? MaybePath => m_obj.Get<global::Doxense.Serialization.Json.JsonPath?>("maybePath", default!);

			/// <inheritdoc cref="MyAwesomeStruct.Disabled" />
			public bool? Disabled => m_obj.Get<bool?>("disabled", default!);

			#endregion

		}

		/// <summary>Wraps a <see cref="JsonObject"/> into a writable type-safe view that emulates the type <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeStruct"/></summary>
		/// <seealso cref="IJsonWritableProxy{TValue}"/>
		public sealed record MyAwesomeStructMutable : JsonWritableProxyObjectBase, IJsonWritableProxy<global::Doxense.Serialization.Json.Tests.MyAwesomeStruct, MyAwesomeStructMutable, MyAwesomeStructReadOnly>
		{

			public MyAwesomeStructMutable(JsonValue value, IJsonProxyNode? parent = null, JsonEncodedPropertyName? name = null, int index = 0) : base(value, parent, name, index)
			{
			}

			#region Public Methods...

			/// <inheritdoc />
			public static MyAwesomeStructMutable Create(JsonValue value, IJsonProxyNode? parent = null, JsonEncodedPropertyName? name = null, int index = 0, IJsonConverter<MyAwesomeStruct>? converter = null) => new(value, parent, name, index);

			/// <inheritdoc />
			public static MyAwesomeStructMutable Create(global::Doxense.Serialization.Json.Tests.MyAwesomeStruct value, CrystalJsonSettings? settings = null, ICrystalJsonTypeResolver? resolver = null) => new(GeneratedSerializers.MyAwesomeStruct.Pack(value, settings.AsMutable(), resolver));

			/// <inheritdoc />
			public static IJsonConverter<MyAwesomeStruct> Converter => GeneratedSerializers.MyAwesomeStruct;

			/// <summary>Pack an instance of <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeStruct"/> into a mutable JSON proxy</summary>
			public static MyAwesomeStructMutable FromValue(global::Doxense.Serialization.Json.Tests.MyAwesomeStruct value)
			{
				global::Doxense.Diagnostics.Contracts.Contract.NotNull(value);
				return new(GeneratedSerializers.MyAwesomeStruct.Pack(value, CrystalJsonSettings.Json));
			}

			/// <inheritdoc />
			public global::Doxense.Serialization.Json.Tests.MyAwesomeStruct ToValue() => GeneratedSerializers.MyAwesomeStruct.Unpack(m_obj);

			/// <inheritdoc />
			public MyAwesomeStructReadOnly ToReadOnly() => new (m_obj.ToReadOnly());

			#endregion

			#region Public Members...

			/// <inheritdoc cref="MyAwesomeStruct.Id" />
			public string Id
			{
				get => m_obj.GetValue("id").ToString();
				set => m_obj["id"] = JsonString.Return(value);
			}

			/// <inheritdoc cref="MyAwesomeStruct.Level" />
			public int Level
			{
				get => m_obj.GetValue("level").ToInt32();
				set => m_obj["level"] = JsonNumber.Return(value);
			}

			/// <inheritdoc cref="MyAwesomeStruct.Path" />
			public JsonPath Path
			{
				get => m_obj.Get<JsonPath>("path");
				set => m_obj.Set<JsonPath>("path", value);
			}

			/// <inheritdoc cref="MyAwesomeStruct.Paths" />
			public JsonPath[]? Paths
			{
				get => m_obj.Get<JsonPath[]?>("paths", null);
				set => m_obj.Set<JsonPath[]?>("paths", value);
			}

			/// <inheritdoc cref="MyAwesomeStruct.MaybePath" />
			public global::Doxense.Serialization.Json.JsonPath? MaybePath
			{
				get => m_obj.Get<global::Doxense.Serialization.Json.JsonPath?>("maybePath", default!);
				set => m_obj.Set<global::Doxense.Serialization.Json.JsonPath?>("maybePath", value);
			}

			/// <inheritdoc cref="MyAwesomeStruct.Disabled" />
			public bool? Disabled
			{
				get => m_obj.Get<bool?>("disabled", default!);
				set => m_obj["disabled"] = JsonBoolean.Return(value);
			}

			#endregion

		}

		#endregion

		#region MyAwesomeDevice...

		/// <summary>JSON converter for type <see cref="Doxense.Serialization.Json.Tests.MyAwesomeDevice">MyAwesomeDevice</see></summary>
		public static MyAwesomeDeviceJsonConverter MyAwesomeDevice => m_cachedMyAwesomeDevice ??= new();

		private static MyAwesomeDeviceJsonConverter? m_cachedMyAwesomeDevice;

		/// <summary>Converts instances of type <see cref="T:Doxense.Serialization.Json.Tests.MyAwesomeDevice">MyAwesomeDevice</see> to and from JSON.</summary>
		public sealed class MyAwesomeDeviceJsonConverter : IJsonConverter<MyAwesomeDevice>
		{

			#region Serialization...

			/// <summary>Names of all serialized members for this type</summary>
			public static class PropertyNames
			{

				/// <summary>Serialized name of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeDevice.Id"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeDevice"/> class</summary>
				public const string Id = "id";

				/// <summary>Serialized name of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeDevice.Model"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeDevice"/> class</summary>
				public const string Model = "model";

				/// <summary>Serialized name of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeDevice.LastSeen"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeDevice"/> class</summary>
				public const string LastSeen = "lastSeen";

				/// <summary>Serialized name of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeDevice.LastAddress"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeDevice"/> class</summary>
				public const string LastAddress = "lastAddress";

				public static string[] GetAllNames() => new [] { PropertyNames.Id, PropertyNames.Model, PropertyNames.LastSeen, PropertyNames.LastAddress };

			}

			/// <summary>Cached encoded names for all serialized members for this type</summary>
			public static class PropertyEncodedNames
			{

				/// <summary>Encoded name of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeDevice.Id"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeDevice"/> class</summary>
				public static readonly JsonEncodedPropertyName Id = new(PropertyNames.Id);

				/// <summary>Encoded name of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeDevice.Model"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeDevice"/> class</summary>
				public static readonly JsonEncodedPropertyName Model = new(PropertyNames.Model);

				/// <summary>Encoded name of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeDevice.LastSeen"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeDevice"/> class</summary>
				public static readonly JsonEncodedPropertyName LastSeen = new(PropertyNames.LastSeen);

				/// <summary>Encoded name of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeDevice.LastAddress"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeDevice"/> class</summary>
				public static readonly JsonEncodedPropertyName LastAddress = new(PropertyNames.LastAddress);

			}

			/// <summary>Writes a JSON representation of an instance of type <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeDevice"/></summary>
			public void Serialize(CrystalJsonWriter writer, global::Doxense.Serialization.Json.Tests.MyAwesomeDevice? instance)
			{
				if (instance is null)
				{
					writer.WriteNull();
					return;
				}

				var state = writer.BeginObject();

				// string Id => "id"
				writer.WriteField(PropertyEncodedNames.Id, instance.Id);

				// string Model => "model"
				writer.WriteField(PropertyEncodedNames.Model, instance.Model);

				// DateTimeOffset? LastSeen => "lastSeen"
				writer.WriteField(PropertyEncodedNames.LastSeen, instance.LastSeen);

				// IPAddress LastAddress => "lastAddress"
				writer.WriteField(PropertyEncodedNames.LastAddress, instance.LastAddress);

				writer.EndObject(state);
			}

			#endregion

			#region Packing...

			/// <summary>Converts an instance of <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeDevice"/> into the equivalent <see cref="JsonValue"/></summary>
			public JsonValue Pack(global::Doxense.Serialization.Json.Tests.MyAwesomeDevice? instance, CrystalJsonSettings? settings = default, ICrystalJsonTypeResolver? resolver = default)
			{
				if (instance is null)
				{
					return JsonNull.Null;
				}

				var obj = new JsonObject(4);

				// "id" => string Id, prop, required, initOnly
				obj.Add(PropertyNames.Id, JsonString.Return(instance.Id));

				// "model" => string Model, prop, required, initOnly
				obj.Add(PropertyNames.Model, JsonString.Return(instance.Model));

				// "lastSeen" => DateTimeOffset? LastSeen, prop, initOnly
				obj.AddIfNotNull(PropertyNames.LastSeen, JsonDateTime.Return(instance.LastSeen));

				// "lastAddress" => IPAddress? LastAddress, prop, initOnly
				obj.AddIfNotNull(PropertyNames.LastAddress, JsonValue.FromValue<global::System.Net.IPAddress>(instance.LastAddress));

				return settings.IsReadOnly() ? CrystalJsonMarshall.FreezeTopLevel(obj) : obj;
			}

			#endregion

			#region Unpacking...

			/// <summary>Unsafe accessor for the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeDevice.Id"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeDevice"/> class</summary>
			/// <remarks><code>string Id { get; init; }</code></remarks>
			[global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Field, Name = "<Id>k__BackingField")]
			private static extern ref string IdAccessor(global::Doxense.Serialization.Json.Tests.MyAwesomeDevice instance);

			/// <summary>Unsafe accessor for the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeDevice.Model"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeDevice"/> class</summary>
			/// <remarks><code>string Model { get; init; }</code></remarks>
			[global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Field, Name = "<Model>k__BackingField")]
			private static extern ref string ModelAccessor(global::Doxense.Serialization.Json.Tests.MyAwesomeDevice instance);

			/// <summary>Unsafe accessor for the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeDevice.LastSeen"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeDevice"/> class</summary>
			/// <remarks><code>DateTimeOffset? LastSeen { get; init; }</code></remarks>
			[global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Field, Name = "<LastSeen>k__BackingField")]
			private static extern ref global::System.DateTimeOffset? LastSeenAccessor(global::Doxense.Serialization.Json.Tests.MyAwesomeDevice instance);

			/// <summary>Unsafe accessor for the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeDevice.LastAddress"/> property of the <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeDevice"/> class</summary>
			/// <remarks><code>IPAddress LastAddress { get; init; }</code></remarks>
			[global::System.Runtime.CompilerServices.UnsafeAccessor(global::System.Runtime.CompilerServices.UnsafeAccessorKind.Field, Name = "<LastAddress>k__BackingField")]
			private static extern ref global::System.Net.IPAddress? LastAddressAccessor(global::Doxense.Serialization.Json.Tests.MyAwesomeDevice instance);

			/// <summary>Deserializes a <see cref="JsonValue"/> into an instance of type <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeDevice"/></summary>
			public global::Doxense.Serialization.Json.Tests.MyAwesomeDevice Unpack(JsonValue value, ICrystalJsonTypeResolver? resolver = default)
			{
				var obj = value.AsObject();
				var instance = global::System.Activator.CreateInstance<global::Doxense.Serialization.Json.Tests.MyAwesomeDevice>();

				foreach (var kv in obj)
				{
					switch (kv.Key)
					{
						case PropertyNames.Id: IdAccessor(instance) = kv.Value.RequiredField("Id").ToString(); break;
						case PropertyNames.Model: ModelAccessor(instance) = kv.Value.RequiredField("Model").ToString(); break;
						case PropertyNames.LastSeen: LastSeenAccessor(instance) = kv.Value.ToDateTimeOffsetOrDefault(); break;
						case PropertyNames.LastAddress: LastAddressAccessor(instance) = /* fallback_no_default */ kv.Value.As<global::System.Net.IPAddress>(resolver: resolver)!; break;
					}
				}

				return instance;
			}

			#endregion

			/// <summary>Returns a read-only JSON Proxy that wraps a <see cref="JsonValue"/> into a type-safe emulation of type <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeDevice"/></summary>
			/// <returns>An instance of <see cref="GeneratedSerializers.MyAwesomeDeviceReadOnly"/> that wraps <paramref name="value"/> and exposes all the original members of <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeDevice"/> as getter-only properties.</returns>

			/// <remarks>
			/// <para>The read-only view cannot modify the original JSON value but, unless <paramref name="value"/> is itself read-only, any changes to the original will be reflected in the view.</para>
			/// <para>How to use:<code>
			/// JsonValue json = JsonValue.Parse(/* JSON text */);
			/// var proxy = GeneratedSerializers.MyAwesomeDevice.AsReadOnly();
			/// var value = proxy.Id; // returns the value of the "id" field exposed as <see cref="string"/>
			/// proxy.Id = newValue; // ERROR: will not compile (there is no setter defined for this member)
			/// </code></para>
			/// </remarks>
			/// <seealso cref="ToMutable(JsonValue)">If you need a writable view</seealso>
			public GeneratedSerializers.MyAwesomeDeviceReadOnly AsReadOnly(JsonValue value) => GeneratedSerializers.MyAwesomeDeviceReadOnly.Create(value, this);

			/// <summary>Converts an instance of type <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeDevice"/> into a read-only type-safe JSON Proxy.</summary>
			/// <returns>An instance of <see cref="GeneratedSerializers.MyAwesomeDeviceReadOnly"/> that exposes all the original members of <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeDevice"/> as getter-only properties.</returns>

			/// <remarks>
			/// <para>How to use:<code>
			/// var instance = new MyAwesomeDevice() { Id = ..., ... };
			/// // ...
			/// var proxy = GeneratedSerializers.MyAwesomeDevice.AsReadOnly(instance);
			/// var value = proxy.Id;
			/// proxy.Id = /* ... */; // ERROR: will not compile (there is no setter defined for this member)
			/// </code></para>
			/// </remarks>
			public GeneratedSerializers.MyAwesomeDeviceReadOnly AsReadOnly(global::Doxense.Serialization.Json.Tests.MyAwesomeDevice? instance) => GeneratedSerializers.MyAwesomeDeviceReadOnly.Create(instance);

			/// <summary>Returns a writable JSON Proxy that wraps a <see cref="JsonValue"/> into a type-safe emulation of type <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeDevice"/></summary>
			/// <returns>An instance of <see cref="GeneratedSerializers.MyAwesomeDeviceMutable"/> that wraps <paramref name="value"/> and exposes all the original members of <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeDevice"/> as writable properties.</returns>

			/// <remarks>
			/// <para>If <paramref name="value"/> is read-only, a mutable copy will be created and used instead.</para>
			/// <para>If <paramref name="value"/> is mutable, then it will be modified in-place. You can call <see cref="JsonValue.ToMutable"/> if you need to make a copy in all cases.</para>
			/// <para>How to use:<code>
			/// JsonValue json = JsonValue.Parse(/* JSON text */);
			/// var proxy = GeneratedSerializers.MyAwesomeDevice.AsMutable();
			/// var value = proxy.Id; // returns the value of the "id" field exposed as <see cref="string"/>
			/// proxy.Id = newValue; // change the value of the "id" field
			/// </code></para>
			/// </remarks>
			/// <seealso cref="AsReadOnly(JsonValue)">If you need a read-only view</seealso>
			public GeneratedSerializers.MyAwesomeDeviceMutable ToMutable(JsonValue value) => GeneratedSerializers.MyAwesomeDeviceMutable.Create(value, converter: this);

			/// <summary>Converts an instance of type <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeDevice"/> into a read-only type-safe JSON Proxy.</summary>
			/// <returns>An instance of <see cref="GeneratedSerializers.MyAwesomeDeviceReadOnly"/> that exposes all the original members of <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeDevice"/> as writable properties.</returns>

			/// <remarks>
			/// <para>How to use:<code>
			/// var instance = new MyAwesomeDevice() { Id = ..., ... };
			/// // ...
			/// var proxy = GeneratedSerializers.MyAwesomeDevice.ToMutable(instance);
			/// var value = proxy.Id;
			/// proxy.Id = newValue;
			/// </code></para>
			/// </remarks>
			public GeneratedSerializers.MyAwesomeDeviceMutable ToMutable(global::Doxense.Serialization.Json.Tests.MyAwesomeDevice? instance) => GeneratedSerializers.MyAwesomeDeviceMutable.Create(instance);

		}

		/// <summary>Wraps a <see cref="JsonObject"/> into a read-only type-safe view that emulates the type <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeDevice"/></summary>
		/// <seealso cref="IJsonReadOnlyProxy{T}"/>
		public readonly record struct MyAwesomeDeviceReadOnly : IJsonReadOnlyProxy<global::Doxense.Serialization.Json.Tests.MyAwesomeDevice, MyAwesomeDeviceReadOnly, MyAwesomeDeviceMutable>
		{

			/// <summary>JSON Object that is wrapped</summary>
			private readonly JsonObject m_obj;

			public MyAwesomeDeviceReadOnly(JsonValue value) => m_obj = value.AsObject();

			#region Public Methods...

			/// <inheritdoc />
			public static MyAwesomeDeviceReadOnly Create(JsonValue value, IJsonConverter<MyAwesomeDevice>? converter = null) => new(value.AsObject());

			/// <inheritdoc />
			public static MyAwesomeDeviceReadOnly Create(global::Doxense.Serialization.Json.Tests.MyAwesomeDevice? value, CrystalJsonSettings? settings = null, ICrystalJsonTypeResolver? resolver = null) => new(GeneratedSerializers.MyAwesomeDevice.Pack(value, settings.AsReadOnly(), resolver));

			/// <inheritdoc />
			public static IJsonConverter<MyAwesomeDevice> Converter => GeneratedSerializers.MyAwesomeDevice;

			/// <inheritdoc />
			public global::Doxense.Serialization.Json.Tests.MyAwesomeDevice ToValue() => GeneratedSerializers.MyAwesomeDevice.Unpack(m_obj);

			/// <inheritdoc />
			public JsonValue ToJson() => m_obj;

			/// <inheritdoc />
			public MyAwesomeDeviceMutable ToMutable() => new(m_obj.Copy());

			/// <inheritdoc />
			public MyAwesomeDeviceReadOnly With(Action<MyAwesomeDeviceMutable> modifier)
			{
				var copy = m_obj.Copy();
				modifier(new(copy));
				return new(copy.Freeze());
			}

			void IJsonSerializable.JsonSerialize(CrystalJsonWriter writer) => m_obj.JsonSerialize(writer);

			JsonValue IJsonPackable.JsonPack(CrystalJsonSettings settings, ICrystalJsonTypeResolver resolver) => m_obj;

			#endregion

			#region Public Members...

			/// <inheritdoc cref="MyAwesomeDevice.Id" />
			public string Id => m_obj.Get<string>("id");

			/// <inheritdoc cref="MyAwesomeDevice.Model" />
			public string Model => m_obj.Get<string>("model");

			/// <inheritdoc cref="MyAwesomeDevice.LastSeen" />
			public global::System.DateTimeOffset? LastSeen => m_obj.Get<global::System.DateTimeOffset?>("lastSeen", default!);

			/// <inheritdoc cref="MyAwesomeDevice.LastAddress" />
			public global::System.Net.IPAddress? LastAddress => m_obj.Get<global::System.Net.IPAddress?>("lastAddress", null);

			#endregion

		}

		/// <summary>Wraps a <see cref="JsonObject"/> into a writable type-safe view that emulates the type <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeDevice"/></summary>
		/// <seealso cref="IJsonWritableProxy{TValue}"/>
		public sealed record MyAwesomeDeviceMutable : JsonWritableProxyObjectBase, IJsonWritableProxy<global::Doxense.Serialization.Json.Tests.MyAwesomeDevice, MyAwesomeDeviceMutable, MyAwesomeDeviceReadOnly>
		{

			public MyAwesomeDeviceMutable(JsonValue value, IJsonProxyNode? parent = null, JsonEncodedPropertyName? name = null, int index = 0) : base(value, parent, name, index)
			{
			}

			#region Public Methods...

			/// <inheritdoc />
			public static MyAwesomeDeviceMutable Create(JsonValue value, IJsonProxyNode? parent = null, JsonEncodedPropertyName? name = null, int index = 0, IJsonConverter<MyAwesomeDevice>? converter = null) => new(value, parent, name, index);

			/// <inheritdoc />
			public static MyAwesomeDeviceMutable Create(global::Doxense.Serialization.Json.Tests.MyAwesomeDevice? value, CrystalJsonSettings? settings = null, ICrystalJsonTypeResolver? resolver = null) => new(GeneratedSerializers.MyAwesomeDevice.Pack(value, settings.AsMutable(), resolver));

			/// <inheritdoc />
			public static IJsonConverter<MyAwesomeDevice> Converter => GeneratedSerializers.MyAwesomeDevice;

			/// <summary>Pack an instance of <see cref="global::Doxense.Serialization.Json.Tests.MyAwesomeDevice"/> into a mutable JSON proxy</summary>
			public static MyAwesomeDeviceMutable FromValue(global::Doxense.Serialization.Json.Tests.MyAwesomeDevice value)
			{
				global::Doxense.Diagnostics.Contracts.Contract.NotNull(value);
				return new(GeneratedSerializers.MyAwesomeDevice.Pack(value, CrystalJsonSettings.Json));
			}

			/// <inheritdoc />
			public global::Doxense.Serialization.Json.Tests.MyAwesomeDevice ToValue() => GeneratedSerializers.MyAwesomeDevice.Unpack(m_obj);

			/// <inheritdoc />
			public MyAwesomeDeviceReadOnly ToReadOnly() => new (m_obj.ToReadOnly());

			#endregion

			#region Public Members...

			/// <inheritdoc cref="MyAwesomeDevice.Id" />
			public string Id
			{
				get => m_obj.GetValue("id").ToString();
				set => m_obj["id"] = JsonString.Return(value);
			}

			/// <inheritdoc cref="MyAwesomeDevice.Model" />
			public string Model
			{
				get => m_obj.GetValue("model").ToString();
				set => m_obj["model"] = JsonString.Return(value);
			}

			/// <inheritdoc cref="MyAwesomeDevice.LastSeen" />
			public global::System.DateTimeOffset? LastSeen
			{
				get => m_obj.Get<global::System.DateTimeOffset?>("lastSeen", default!);
				set => m_obj["lastSeen"] = JsonDateTime.Return(value);
			}

			/// <inheritdoc cref="MyAwesomeDevice.LastAddress" />
			public global::System.Net.IPAddress? LastAddress
			{
				get => m_obj.Get<global::System.Net.IPAddress?>("lastAddress", null);
				set => m_obj.Set<global::System.Net.IPAddress?>("lastAddress", value);
			}

			#endregion

		}

		#endregion

	}

}

#endif
#endif
